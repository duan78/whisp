#!/usr/bin/env python3
"""
Script de test pour v√©rifier les backends audio disponibles
Teste la compatibilit√© avec Windows ARM64 et autres plateformes
"""

import sys
import traceback
from typing import Dict, List

def test_audio_backends() -> Dict[str, bool]:
    """
    Teste la disponibilit√© des diff√©rents backends audio.

    Returns:
        Dict mapping backend names to availability status
    """
    results = {}

    print("Microphone: Test des backends audio disponibles...\n")

    # Test 1: PyAudio (traditionnel)
    print("1. Test de PyAudio...")
    try:
        import pyaudio
        pa = pyaudio.PyAudio()
        device_count = pa.get_device_count()
        pa.terminate()
        results['pyaudio'] = True
        print(f"   [OK] PyAudio disponible - {device_count} appareils audio d√©tect√©s")
    except Exception as e:
        results['pyaudio'] = False
        print(f"   [ERREUR] PyAudio non disponible: {e}")

    # Test 2: sounddevice (recommand√© pour ARM64)
    print("\n2. Test de sounddevice...")
    try:
        import sounddevice as sd
        devices = sd.query_devices()
        results['sounddevice'] = True
        print(f"   ‚úÖ sounddevice disponible - {len(devices)} appareils audio d√©tect√©s")

        # Afficher quelques appareils
        input_devices = [d for d in devices if d['max_input_channels'] > 0]
        if input_devices:
            print(f"      Appareils d'entr√©e: {len(input_devices)}")
            for i, device in enumerate(input_devices[:3]):  # Limiter √† 3 pour la lisibilit√©
                print(f"         - {device['name']}")
    except Exception as e:
        results['sounddevice'] = False
        print(f"   ‚ùå sounddevice non disponible: {e}")

    # Test 3: soundfile (fallback basique)
    print("\n3. Test de soundfile...")
    try:
        import soundfile as sf
        import numpy as np
        # Test basique d'√©criture/lecture
        test_data = np.random.randint(-32768, 32767, 1000, dtype=np.int16)
        with sf.SoundFile('test_audio.wav', 'w', 16000, 1, 'PCM_16') as f:
            f.write(test_data)
        results['soundfile'] = True
        print("   ‚úÖ soundfile disponible - Test d'√©criture r√©ussi")
        import os
        os.remove('test_audio.wav')  # Nettoyer
    except Exception as e:
        results['soundfile'] = False
        print(f"   ‚ùå soundfile non disponible: {e}")

    # Test 4: SpeechRecognition (le wrapper principal)
    print("\n4. Test de SpeechRecognition...")
    try:
        import speech_recognition as sr
        recognizer = sr.Recognizer()

        # Test de cr√©ation de microphone (sans l'utiliser r√©ellement)
        try:
            microphone = sr.Microphone()
            results['speechrecognition'] = True
            print("   ‚úÖ SpeechRecognition disponible - Microphone d√©tect√©")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  SpeechRecognition disponible mais microphone inaccessible: {e}")
            results['speechrecognition'] = False
    except Exception as e:
        results['speechrecognition'] = False
        print(f"   ‚ùå SpeechRecognition non disponible: {e}")

    return results

def test_platform_info():
    """Affiche les informations sur la plateforme actuelle"""
    import platform
    import os

    print("üñ•Ô∏è  Informations sur la plateforme:")
    print(f"   Syst√®me: {platform.system()}")
    print(f"   Version: {platform.release()}")
    print(f"   Architecture: {platform.machine()}")
    print(f"   Python: {platform.python_version()}")

    if platform.system() == "Windows":
        try:
            import ctypes
            is_arm64 = platform.machine() == "ARM64"
            if is_arm64:
                print(f"   ‚úÖ Plateforme Windows ARM64 d√©tect√©e")
            else:
                print(f"   ‚ÑπÔ∏è  Plateforme Windows {platform.machine()}")
        except:
            pass

def test_installation_recommendations(results: Dict[str, bool]):
    """Donne des recommandations d'installation bas√©es sur les r√©sultats"""
    print(f"\nüí° Recommandations d'installation:")

    if not results['pyaudio'] and not results['sounddevice']:
        print("   üì¶ Installation recommand√©e (priorit√© haute):")
        print("      pip install sounddevice numpy")
        print("   ")
        print("   üì¶ Alternative PyAudio (si sounddevice ne fonctionne pas):")
        print("      pip install pip-wheel")
        print("      pip install --only-binary :all: pyaudio")

    elif not results['pyaudio'] and results['sounddevice']:
        print("   ‚úÖ sounddevice est disponible - Pas besoin de PyAudio!")
        print("   üì¶ sounddevice est recommand√© pour votre architecture.")

    elif results['pyaudio'] and not results['sounddevice']:
        print("   ‚úÖ PyAudio fonctionne mais sounddevice est recommand√©:")
        print("   üì¶ Pour de meilleures performances:")
        print("      pip install sounddevice")

    else:
        print("   ‚úÖ Plusieurs backends sont disponibles!")
        print("   üéØ Utilisation recommand√©e: sounddevice (plus stable)")

def main():
    """Fonction principale du test"""
    print("Test de Compatibilit√© Audio - Whisp Assistant")
    print("=" * 50)

    # Informations sur la plateforme
    test_platform_info()
    print()

    # Test des backends
    results = test_audio_backends()

    # Recommandations
    test_installation_recommendations(results)

    # R√©sum√©
    print(f"\nüìä R√©sum√© des backends audio:")
    available_count = sum(results.values())
    total_count = len(results)

    for backend, available in results.items():
        status = "‚úÖ Disponible" if available else "‚ùå Non disponible"
        print(f"   {backend}: {status}")

    print(f"\nüéØ R√©sultat: {available_count}/{total_count} backends disponibles")

    if available_count == 0:
        print("\n‚ö†Ô∏è  Aucun backend audio n'est disponible!")
        print("   Veuillez installer l'un des backends recommand√©s ci-dessus.")
        return False
    elif available_count < total_count:
        print("\n‚ö° Au moins un backend est disponible - L'application fonctionnera.")
        print("   Pour de meilleures performances, installez les backends manquants.")
        return True
    else:
        print("\nüéâ Tous les backends sont disponibles - Performance optimale garantie!")
        return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)