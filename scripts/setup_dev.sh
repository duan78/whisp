#!/bin/bash

# Script de configuration de l'environnement de d√©veloppement pour Whisp Assistant
# Usage: bash scripts/setup_dev.sh

set -e

echo "üöÄ Configuration de l'environnement de d√©veloppement Whisp Assistant..."

# V√©rifier Python
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python 3 est requis mais n'est pas install√©."
    exit 1
fi

PYTHON_VERSION=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
echo "‚úÖ Python $PYTHON_VERSION d√©tect√©"

# Cr√©er l'environnement virtuel
if [ ! -d "venv" ]; then
    echo "üì¶ Cr√©ation de l'environnement virtuel..."
    python3 -m venv venv
fi

# Activer l'environnement virtuel
echo "üîß Activation de l'environnement virtuel..."
source venv/bin/activate

# Mettre √† jour pip
echo "‚¨ÜÔ∏è  Mise √† jour de pip..."
pip install --upgrade pip setuptools wheel

# Installer les d√©pendances
echo "üìö Installation des d√©pendances..."
pip install -r requirements.txt
pip install -r requirements-dev.txt

# Installer pre-commit hooks
echo "üîó Configuration des hooks pre-commit..."
pre-commit install

# Cr√©er les fichiers de configuration si n√©cessaire
if [ ! -f "config.env" ]; then
    echo "üìù Cr√©ation du fichier de configuration..."
    cp config.example.env config.env
    echo "‚úÖ Fichier config.env cr√©√©. √âditez-le selon vos besoins."
fi

if [ ! -f "api_keys.json" ]; then
    echo "üîë Cr√©ation du fichier de cl√©s API..."
    cp api_keys.json.example api_keys.json
    echo "‚úÖ Fichier api_keys.json cr√©√©. Ajoutez vos cl√©s API."
fi

# Cr√©er les dossiers n√©cessaires
echo "üìÅ Cr√©ation des dossiers de donn√©es..."
mkdir -p logs
mkdir -p records
mkdir -p backups
mkdir -p cache

# V√©rifier l'installation
echo "üß™ V√©rification de l'installation..."
python -c "
try:
    import speech_recognition_module
    print('‚úÖ Module STT OK')
except ImportError as e:
    print(f'‚ùå Erreur STT: {e}')

try:
    import tts_module
    print('‚úÖ Module TTS OK')
except ImportError as e:
    print(f'‚ùå Erreur TTS: {e}')

try:
    import web_interface
    print('‚úÖ Interface web OK')
except ImportError as e:
    print(f'‚ùå Erreur interface web: {e}')
"

# Tests rapides
echo "üß™ Ex√©cution des tests rapides..."
if command -v pytest &> /dev/null; then
    pytest tests/ -v --tb=short -x || echo "‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez la configuration."
else
    echo "‚ö†Ô∏è  pytest non trouv√©, saut des tests."
fi

echo ""
echo "üéâ Configuration termin√©e !"
echo ""
echo "Prochaines √©tapes :"
echo "1. Activez l'environnement: source venv/bin/activate"
echo "2. Configurez vos cl√©s API dans api_keys.json"
echo "3. Adaptez config.env selon vos pr√©f√©rences"
echo "4. Lancez l'assistant: python main.py"
echo ""
echo "Documentation: https://docs.whisp-assistant.com"
echo "Support: https://github.com/votre-username/whisp-assistant/issues"